React native
    react but rendering to ios,android

Expo
    npx create-react-app : react 쉽게 시작, webpack등 set
    expo역시 마찬가지, react application 쉽게 시작
    react native용 create-react-app
    
    안드로이드, IOS를 맥,윈도우 모두에서 만들 수 있음
    Expo SDK가 많은 기능을 제공
    Expo Go : 핸드폰에서 앱 테스팅 가능
    Expo CLI
    Expo snack : 브라우저에서 돌아가는 snack
    over the air update : 앱스토어를 스킵하는 업데이트
        react native를 컴파일하면 js가 됨
        핸드폰에 앱을 가진 유저들이 앱스토어에서 업데이트 하지 않고,
        앱이 새로운 js파일을 다운로드하고 재시작하면 새로운 버전의 앱이 되는 것
        expo는 내부적으로 항상 업데이트를 체크
        원래대로라면, 빌드하고, 앱스토어에 올리고 앱스토어의 승인을 기다리는 등 시간 소요 큼

    단점
        네이티브 앱 코드와 섞여있는 경우, 사용 불가, react native CLI 사용
            Xcode, android files에 접근해야 하는 경우 불가능
        Expo SDK에 없는 게 필요한 경우, 사용 불가
            bluetooth같은 경우 지원 안함
        expo의 limitation에 대해서 인지하고 프로젝트 시작해야함
        expo의 모든 API가 모두 최종 번들에 포함됨(사용하지 않는 API도)

    expo eject
        expo에서 만들거 만들고, eject해서 bluetooth 만들 수 있음
        필요없는 일부 API도 없앨 수 있음
        리액트 네이티브 코드 사용 가능
        
Managed Workflow로 시작한 뒤에 eject
Expo에서 어떤 네이티브 코드도 사용하면 안됨

start : expo start

AppLoading
    원할때까지 앱이 로딩하는걸 막아주는 컴포넌트

npm install expo-app-loading
npm install expo-font

Preload
    유저가 앱으로 갔을 때 앱은 준비된 상태여야 함
    preload contents : font, logo and so on

loadAsync
    require, or url

React Navigation
    npm install @react-navigation/native
    expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
    npm install @react-navigation/stack

stack navigator
    앱 내에서 화면을 바꿀때, 스택 더미처럼 쌓여가는 것,
    페이지가 바뀌는게 아님

    Navigator를 Navigation Container로 감싸야함

    prop : Navigation, route object
    
    Navigation에서는 goBack, push, pop 등 stack처럼 navigator를 사용 가능

    stack.screen의 name이 route가 됨
    screen comes to us

configure the screen
    Stack.Navigator props
        initialRouteName
        mode
        headerMode
        screenOptions : 모든 screen에 option 적용
    Stack.Screen
        options : only apply to the specific screen

Dark mode   
    react-native-appearance
        유저의 모드에 따라서 설정하게 해줌
    React와 마찬가지로 ThemeProvider 설정하면 됨

React native의 css와 평범한 CSS와 살짝 설정이 다름
    View에서 text-size를 해줘도 그 밑의 Text Component에 적용 X
    Text에서 직접 설정해야 함

TextInput
    keyboard type등 여러가지 option이 있음
    유저의 사용성에 집중하기

useRef
    Component에 ref prop 등록한 다음, 다른 컴포넌트에서 그 컴포넌트 사용 가능
    current : 실제로 연결된 component를 알려줌

useForm
    no Form, no submit Event
    =>use Button

    in React, form에서 register
    in native, register()을 통해서 등록해야함

tunnel
    make public url
    외부에서 로컬에 접속 가능하게 해주는 터널프로그램
    1. localtunnel
        npx localtunnel --port 4000
    2. ngrok

hook의 수는 모든 렌더링에서 다 똑같아야 함
    처음부터 모든 hook을 렌더링 해야함
    모든 훅은 항상 렌더링 되어야 함

useForm
    getValues : value를 딱 한번 가져옴
    watch : 실시간으로 value를 가져옴

Tabs
    import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
    메뉴같이 헤더나 바텀에 탭 만들수 있음
    Stack과 사용법은 유사
    navigator, screen 사용

route prop
    can get params
    send params using navigation

AsyncStorage
    react native에는 localStorage가 없음
    expo install @react-native-async-storage/async-storage

    expo install -> npm install 호출 후, 현재 expo version에서 돌아가는지 확인

    1. use async ~ await
    2. when setItem, stringify

모든 화면은 stack navigator상에 있음
    stack에 있는 카드들은 모든 탭에서 공유되어지고 있음
    4개의 다른 스택 네비게이터를 만들고 첫번째 화면을 제외하고 전부 똑같은 화면
    feed stack navigator 만들면, 첫번째 화면은 feed

    사진에서 프로필을 누르면 프로필로 가고, 프로필에서 사진을 누르면 사진으로 가야함
    똑같은 stack을 공유할 것
    탭 네비게이션에 있는 각각의 탭에 대해 스택 네비게이터를 만들 것

    스택 네비게이션을 렌더링하는 탭 네비게이션
    피드에서 여기저기 타고 들어간 다음에 notification오면 notification만의 스택 네비게이터가 있어야 할 것
    모든 탭 네비게이터가 공유하는 스택도 있음

    탭마다 카드더미가 있다고 생각
    탭의 스택 네비게이터에 있는 곳 중에 갈 수 있음


makeVar는 useReactiveVar과 연동해야지만, 바로바로 update됨


Flat list
    cf)Scroll View
    긴 데이터를 담고 있는 리스트를 다루는 더 좋은 방법
    사용자가 끝까지 스크롤을 내리지도 않는데, 거대한 스크롤뷰를 제공하는건 비효율적
    한번에 모든 데이터를 렌더링

    FlatList renders items lazily, 오직 화면에 걸쳐진 아이템만 렌더링
    data,renderItem(rendering function),keyExtractor set

    Pull to refresh
        add refreshing, onRefresh props to flat list
        refreshing이 true일때 동작하고,
        onRefresh는 당기고 나서 이벤트를 담고 있어야함

apollo는 데이터를 캐쉬에 저장, 새로고침 했다고 다시 화면 전체 렌더링하지 않고
바뀐부분만 업데이트

Infinite Scroll
    server : take,offset 설정
    onEndReached : 끝에 도달했을 때 함수 호출
    onEndReachedThreshold : 끝을 재지정, 중간쯤부터 끝났다고 인식시켜서 리로딩이 빠르다고 느끼게 할 수 있음
    fetchMore : 기존 결과 유지하면서 새로운 결과 추가
    
    typePolicy
        component의 state를 바꾸지 않는 이상 no rerendering
        cache의 data만 변경함
        seeFeed(offset:0)과 seeFeed(offset:2)는 전혀 다른 data로 apollo cache는 인식
        같은 데이터로 인식시켜서 data에 변화가 있음을 알리고, rerendering 유도
        query에 따라 구별시키는 것을 막음
        Apollo client의 InMemoryCache에서 configure
        새롭게 fetchMore할 때 merge하는 방식도 수정 가능
        
useLazyQuery
    useQuery : 처음에 바로 실행, option+refetch로 처리할 수도 있기는 함
        const { data, refetch, networkStatus } = useQuery(SEARCH_USERS_QUERY, {
        enabled: false,
        notifyOnNetworkStatusChange: true,
    });
    useLazyQuery : 등록하자마자 실행 X, 원할 때 query
        startQueryFn(1st arg)을 부르는 순간 실행
        loading의 default value : false, 당연히 아직 실행 안했으니까


array===[] (X)
array.length===0 (O)
    그 이유는, array 비교를 하면 포인터 값을 비교하기 때문


stack 안에 Tabs Navigator가 있고 Tabs Navigator마다 stack이 있음,
    이렇게 아키텍쳐를 수정하는 이유는?
        카메라 아이콘을 선택했을 때, 
        스택에 있는 스크린이 아닌 아예 다른 스크린으로 넘어가고 싶어서

Stack에서 보여주고 싶은 스크린과 숨기고 싶은 스크린을 순서를 통해서 결정

카메라 버튼을 누를때, 기본 액션을 차단 -> tab의 기본 액션이 일어나지 않음

navigator가 navigation prop을 만듦


Tabs.Screen에 컴포넌트를 넣으면 어떤것이든 렌더링 가능

expo-media-library
    유저의 디바이스의 갤러리(미디어)에 접근하기 위해 필요
    